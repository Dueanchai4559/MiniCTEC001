/* eslint-disable @next/next/no-img-element */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { ChangeEvent } from "react";
import { Dialog } from "@headlessui/react";
import type { User, Role1 } from "./types";

type Props = {
    data: User;
    onClose: () => void;
    onSave: () => void;
    isCreating: boolean;
    allUsers: User[];
    setEditUser: React.Dispatch<React.SetStateAction<User | null>>;
};

export default function EditUserModal({
    data,
    onClose,
    onSave,
    isCreating,
    allUsers,
    setEditUser,
}: Props) {
    const handleChange = (field: keyof User, value: any) => {
        setEditUser((prev) => ({ ...prev!, [field]: value }));
    };

    const handleFileUpload = (e: ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setEditUser((prev) => ({ ...prev!, image: reader.result as string }));
            };
            reader.readAsDataURL(file);
        }
    };

    return (
        <Dialog open={!!data} onClose={onClose} className="fixed inset-0 z-50 flex items-center justify-center">
            <Dialog.Panel className="bg-white p-2 rounded w-[80vw] max-h-[90vh] shadow overflow-y-auto space-y-4 text-[14px]">
                <h3 className="text-2xl font-bold">
                    {isCreating ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" : "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-1 gap-4">
                    <div className="grid grid-cols-5 gap-4  ">
                        {/* ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå - ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢ ‡∏Å‡∏¥‡∏ô 2 ‡πÅ‡∏ñ‡∏ß */}
                        <div className="row-span-3 flex flex-col items-center md:items-start">
                            <label htmlFor="image-upload" className="text-xl text-gray-500 mb-2 ml-4 font-medium cursor-pointer">
                                {data.image ? (
                                    <img
                                        src={data.image}
                                        alt="‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                                        className="w-62 h-62 rounded-full object-cover border-2 border-gray-300 shadow"
                                    />
                                ) : (
                                    <div className="w-62 h-62 rounded-full bg-gray-200 flex items-center justify-center text-gray-400 border">
                                        ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
                                    </div>
                                )}
                                <div className="mt-2 underline text-blue-600 text-sm">‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ</div>
                            </label>
                            <input id="image-upload" type="file" accept="image/*" className="hidden" onChange={handleFileUpload} />
                        </div>

                        {/* ‡∏ä‡∏∑‡πà‡∏≠ */}
                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">‡∏ä‡∏∑‡πà‡∏≠</label>
                            <input className="p-2 border rounded" value={data.name ?? ""} onChange={(e) => handleChange("name", e.target.value)} />
                        </div>

                        {/* Username */}
                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">Username</label>
                            <input className="p-2 border rounded" value={data.username ?? ""} onChange={(e) => handleChange("username", e.target.value)} />
                        </div>

                        {/* ‡πÄ‡∏û‡∏® */}
                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">‡πÄ‡∏û‡∏®</label>
                            <select className="p-2 border rounded" value={data.gender ?? ""} onChange={(e) => handleChange("gender", e.target.value)}>
                                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                                <option value="male">‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢</option>
                                <option value="female">‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á</option>
                            </select>
                        </div>

                        {/* ‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                            <input className="p-2 border rounded" value={data.email ?? ""} onChange={(e) => handleChange("email", e.target.value)} />
                        </div>

                        <div className="flex flex-col md:grid-cols-2">
                            <label className="text-gray-600 font-semibold mb-1">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
                            <input className="p-2 border rounded" value={data.phone ?? ""} onChange={(e) => handleChange("phone", e.target.value)} />
                        </div>

                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                            <select className="p-2 border rounded" value={data.role ?? ""} onChange={(e) => handleChange("role", e.target.value)}>
                                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --</option>
                                <option value="adminCT">adminCT</option>
                                <option value="admin">admin</option>
                                <option value="userMedicine">userMedicine</option>
                                <option value="waitting">waitting</option>
                            </select>
                        </div>

                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
                            <select className="p-2 border rounded" value={data.statusWork ?? ""} onChange={(e) => handleChange("statusWork", e.target.value)}>
                                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                                <option value="1">üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</option>
                                <option value="2">‚ö™ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</option>
                                <option value="3">‚õî ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ</option>
                                <option value="4">üóëÔ∏è ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á</option>
                            </select>
                        </div>

                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</label>
                            <select className="p-2 border rounded" value={data.userAcceptName ?? ""} onChange={(e) => handleChange("userAcceptName", e.target.value)}>
                                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ --</option>
                                {allUsers.map((u) => (
                                    <option key={u.id} value={u.username}>
                                        {u.name} ({u.username})
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">RFID</label>
                            <input className="p-2 border rounded" value={data.rfid ?? ""} onChange={(e) => handleChange("rfid", e.target.value)} />
                        </div>

                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">Barcode</label>
                            <input className="p-2 border rounded" value={data.barcode ?? ""} onChange={(e) => handleChange("barcode", e.target.value)} />
                        </div>

                        <div className="flex flex-col">
                            <label className="text-gray-600 font-semibold mb-1">QR Code</label>
                            <input className="p-2 border rounded" value={data.qrCode ?? ""} onChange={(e) => handleChange("qrCode", e.target.value)} />
                        </div>
                    </div>

                    <div className="flex flex-col md:col-span-1">
                        <label className="text-gray-600 font-semibold mb-1">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                        <textarea className="p-2 border rounded w-full" value={data.note ?? ""} onChange={(e) => handleChange("note", e.target.value)} />
                    </div>
                </div>

                {/* ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ */}
                <div className="space-y-6">
                    {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                    {[
                        {
                            title: "üìã ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ",
                            items: [
                                ["do1", "DashBoard"],
                                ["do2", "‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
                                ["do3", "‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤"],
                                ["do4", "‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏¢‡∏≤"],
                                ["do5", "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≤"],
                                ["do6", "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"],
                                ["do7", "‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏Å‡∏ï‡∏π‡πâ‡∏û‡∏±‡∏Å"],
                                ["do8", "‡∏´‡∏ô‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"],
                                ["do9", "‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"],
                                ["do10", "‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"],
                                ["do11", "‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡πâ‡∏¢‡∏≤"],
                                ["do12", "‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ö‡∏¥‡∏Å‡∏¢‡∏≤‡∏î‡πà‡∏ß‡∏ô"],
                                ["do13", "‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"],
                                ["do14", "‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"],
                            ],
                        },
                        {
                            title: "üß™ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏≤",
                            items: [
                                ["do15", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏≤"],
                                ["do17_1", "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏¢‡∏≤"],
                                ["do17_2", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏¢‡∏≤"],
                                ["do17_3", "‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡∏≤"],
                                ["do17_4", "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"],
                                ["do17_5", "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"],
                            ],
                        },
                        {
                            title: "üõ†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ",
                            items: [
                                ["do16", "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï"],
                                ["do17", "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏π‡πâ‡∏¢‡∏≤"],
                                ["do18", "‡∏´‡∏ô‡πâ‡∏≤ CTV"],
                            ],
                        },
                        {
                            title: "‚ö†Ô∏è ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ",
                            items: [
                                ["do19", "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"],
                                ["do20", "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏© 20"],
                            ],
                        },
                    ].map((group, index) => (
                        <div key={index} className="border border-gray-300 rounded-lg p-4 shadow-sm">
                            <h5 className="text-lg font-semibold mb-3">{group.title}</h5>
                            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
                                {group.items.map(([key, label]) => (
                                    <label key={key} className="inline-flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            className="w-5 h-5"
                                            checked={data.role1?.[key as keyof Role1] || false}
                                            onChange={(e) => {
                                                const updated = {
                                                    ...(data.role1 || {}),
                                                    [key]: e.target.checked,
                                                };
                                                handleChange("role1", updated);
                                            }}
                                        />
                                        <span>{label}</span>
                                    </label>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>


                <div className="flex justify-end gap-2 ">
                    <button className="bg-gray-400 text-white px-4 py-2 rounded" onClick={onClose}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    <button className="bg-green-600 text-white px-4 py-2 rounded" onClick={onSave}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
            </Dialog.Panel >
        </Dialog >
    );
}
